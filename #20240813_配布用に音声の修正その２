import sys
import os
from bs4 import BeautifulSoup
import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
import time
import tkinter as tk
from tkinter import messagebox
import pygame

def resource_path(relative_path):
    """音声ファイルなどのリソースを取得するためのパスを作成"""
    if hasattr(sys, '_MEIPASS'):
        # PyInstallerでパッケージ化された場合、リソースが一時ディレクトリに保存される
        return os.path.join(sys._MEIPASS, relative_path)
    return os.path.join(os.path.abspath("."), relative_path)

def scrape_data():
    # 猫の音を再生
    play_sound()

    # 検索ワードを取得
    search_term = entry_search_term.get()
    if not search_term:
        messagebox.showerror("エラー", "検索ワードを入力してください！")
        return

    # 繰り返し回数を取得
    try:
        max_iterations = int(entry_iterations.get())
    except ValueError:
        messagebox.showerror("エラー", "繰り返し回数を正しく入力してください！")
        return

    # SeleniumのWebDriverを設定
    driver_path = r'C:\Users\yukik\Desktop\chromedriver.exe'  # あなたのchromedriver.exeのパスを指定してください
    service = Service(driver_path)
    driver = webdriver.Chrome(service=service)

    # 初期ページを開く
    url = f'https://www.ncbi.nlm.nih.gov/books/?term={search_term}'  # 検索キーワードをURLに組み込む
    driver.get(url)

    titles = []
    links = []

    current_iteration = 0

    while current_iteration < max_iterations:
        # ページの内容をBeautifulSoupで解析
        soup = BeautifulSoup(driver.page_source, 'html.parser')
        booklists = soup.find_all('p', class_='title')  # p.title を全て取得

        # 書籍タイトルとリンクを取得
        for booklist in booklists:
            a_tag = booklist.find('a', href=True)
            if a_tag:
                titles.append(a_tag.get_text().strip())  # タイトルを取得してリストに追加
                links.append('https://www.ncbi.nlm.nih.gov' + a_tag['href'])  # フルリンクを作成してリストに追加

        try:
            # "Next" ボタンが表示されるまでスクロール
            driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(2)  # スクロール後の読み込みを待つ

            # "Next" ボタンがクリック可能になるまで待つ
            next_button = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.CLASS_NAME, "active.page_link.next"))
            )
            next_button.click()
            current_iteration += 1
        except Exception as e:
            # "Next" ボタンが見つからない場合はループを終了
            print(f"次のページに移動できませんでした: {e}")
            break

    # ドライバーを閉じる
    driver.quit()

    # タイトルとリンクの長さを一致させる
    max_length = max(len(titles), len(links))
    titles.extend([''] * (max_length - len(titles)))
    links.extend([''] * (max_length - len(links)))

    # 解析したデータを辞書に保存
    data = {
        'Title': titles,
        'Link': links
    }

    # データフレームを作成
    df = pd.DataFrame(data)

    # 出力ファイルパスをユーザーのドキュメントフォルダに設定
    output_directory = os.path.join(os.path.expanduser('~'), 'Documents')
    output_file_path = os.path.join(output_directory, 'ncbi_result_info.xlsx')

    # データフレームをExcelファイルに書き出す
    df.to_excel(output_file_path, index=False, engine='openpyxl')

    messagebox.showinfo("完了", f"Excelファイル '{output_file_path}' に保存されました！")

def play_sound():
    # 音声ファイルの相対パスを設定
    local_sound_file = resource_path('nyanko_oto.mp3')
    
    pygame.mixer.init()
    pygame.mixer.music.load(local_sound_file)
    pygame.mixer.music.play()

def clear_input():
    entry_search_term.delete(0, tk.END)
    entry_iterations.delete(0, tk.END)

# GUIのセットアップ
root = tk.Tk()
root.title("NCBIデータスクレイパー")

tk.Label(root, text="検索ワード:").grid(row=0, column=0, padx=10, pady=10)
entry_search_term = tk.Entry(root)
entry_search_term.grid(row=0, column=1, padx=10, pady=10)

tk.Label(root, text="繰り返し回数:").grid(row=1, column=0, padx=10, pady=10)
entry_iterations = tk.Entry(root)
entry_iterations.grid(row=1, column=1, padx=10, pady=10)

btn_scrape = tk.Button(root, text="スクレイプ開始", command=scrape_data)
btn_scrape.grid(row=2, column=0, pady=20)

btn_clear = tk.Button(root, text="クリア", command=clear_input)
btn_clear.grid(row=2, column=1, pady=20)

root.mainloop()
#20240813_配布用に音声の修正その２
